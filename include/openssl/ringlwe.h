/* crypto/ringlwe/ringlwe.h */
#ifndef HEADER_RINGLWE_H
#define HEADER_RINGLWE_H

#include <openssl/opensslconf.h>

#ifdef OPENSSL_NO_RINGLWE
#error RINGLWE is disabled.
#endif

#include <openssl/ossl_typ.h>
#include <openssl/bn.h>
#include <openssl/err.h>

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef RINGELT
#define RINGELT uint_fast16_t
#endif

typedef struct ringlwe_param_data_st RINGLWE_PARAM_DATA;
typedef struct rlwe_param_st RLWE_PARAM;
typedef struct rlwe_pub_st RLWE_PUB;
typedef struct rlwe_pair_st RLWE_PAIR;
typedef struct rlwe_rec_st RLWE_REC;
typedef struct rlwe_ctx_st RLWE_CTX;

/* Allocate and deallocate parameters, public keys, private key / public key pairs, and reconciliation data structures */
RLWE_PARAM *RLWE_PARAM_new(void);
RINGLWE_PARAM_DATA *RINGLWE_PARAM_DATA_set(int nid);
int RLWE_PARAM_init(RLWE_PARAM *r, int nid);
void RLWE_PARAM_free(RLWE_PARAM *param);

RLWE_PUB *RLWE_PUB_new(const RLWE_CTX *ctx);
RLWE_PUB *RLWE_PUB_dup(const RLWE_PUB *src);
void RLWE_PUB_free(RLWE_PUB *pub);

RLWE_PAIR *RLWE_PAIR_new(RLWE_CTX *ctx);
RLWE_PAIR *RLWE_PAIR_dup(const RLWE_PAIR *pair);
void RLWE_PAIR_free(RLWE_PAIR *pair);

RLWE_REC *RLWE_REC_new(uint32_t muwords);
void RLWE_REC_free(RLWE_REC *rec);

RLWE_CTX *RLWE_CTX_new(const int nid);
void RLWE_CTX_free(RLWE_CTX *ctx);

/* Generate key pair */
int RLWE_PAIR_generate_key(RLWE_PAIR *keypair);

/* Convert public keys and reconciliation data structures from/to binary */
RLWE_PUB *o2i_RLWE_PUB(RLWE_PUB **pub, const unsigned char *in, size_t len);
RLWE_PAIR *o2i_RLWE_SEC(RLWE_PAIR **pair, const unsigned char *in, size_t len);
size_t i2o_RLWE_PUB(RLWE_PUB *pub, unsigned char **out);
size_t i2o_RLWE_SEC(RLWE_PAIR *pair, unsigned char **out);
RLWE_REC *o2i_RLWE_REC(RLWE_REC **rec, const unsigned char *in, size_t len);
size_t i2o_RLWE_REC(RLWE_REC *rec, unsigned char **out);

int RLWE_get_nid_from_descriptor(const unsigned char descriptor[]);
uint32_t RLWE_CTX_get_m(RLWE_CTX *ctx);
RINGELT RLWE_CTX_get_q(RLWE_CTX *ctx);

/* Get public key from a key pair */
RLWE_PUB *RLWE_PAIR_get_publickey(RLWE_PAIR *pair);
/* Does private key exist? */
int RLWE_PAIR_has_privatekey(RLWE_PAIR *pair);

/* Compute shared secret values */
size_t RINGLWE_compute_key_alice(void *out,
			      size_t outlen,
			      const RLWE_PUB *bob_pub,
			      const RLWE_REC *reconciliation,
			      const RLWE_PAIR *alice_keypair,
			      void *(*KDF)(const void *in, size_t inlen, void *out, size_t *outlen));
size_t RINGLWE_compute_key_bob(void *out,
			    size_t outlen,
			    RLWE_REC **reconciliation,
			    const RLWE_PUB *alice_pub,
			    const RLWE_PUB *bob_pub,
                            void *(*KDF)(const void *in, size_t inlen, void *out, size_t *outlen));


/* BEGIN ERROR CODES */
/* The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
void ERR_load_RINGLWE_strings(void);

/* Error codes for the RINGLWE functions. */

/* Function codes. */
#define RINGLWE_F_I2O_RLWE_PUB				 100
#define RINGLWE_F_I2O_RLWE_REC				 104
#define RINGLWE_F_I2O_RLWE_SEC				 124
#define RINGLWE_F_O2I_RLWE_PUB				 101
#define RINGLWE_F_O2I_RLWE_REC				 105
#define RINGLWE_F_O2I_RLWE_SEC				 125
#define RINGLWE_F_RANDOM32				 111
#define RINGLWE_F_RANDOM64				 112
#define RINGLWE_F_RANDOM8				 110
#define RINGLWE_F_RINGLWE_				 107
#define RINGLWE_F_RINGLWE_COMPUTE_KEY_ALICE		 108
#define RINGLWE_F_RINGLWE_COMPUTE_KEY_BOB		 109
#define RINGLWE_F_RLWE_CTX_NEW				 114
#define RINGLWE_F_RLWE_CTX_INIT                          120
#define RINGLWE_F_RLWE_PAIR_DUP 			 115
#define RINGLWE_F_RLWE_PAIR_NEW				 102
#define RINGLWE_F_RLWE_PARAM_NEW			 113
#define RINGLWE_F_RINGLWE_PARAM_DATA_SET                 122
#define RINGLWE_F_RLWE_PUB_DUP				 116
#define RINGLWE_F_RLWE_PUB_NEW				 103
#define RINGLWE_F_RLWE_REC_NEW				 106
#define RINGLWE_F_RLWE_PAIR_GENERATE_KEY                 123

/* Reason codes. */
#define RINGLWE_R_INVALID_FORMAT			 102
#define RINGLWE_R_KDF_FAILED				 100
#define RINGLWE_R_RANDOM_FAILED				 101
#define RINGLWE_R_PARAM_UNKNOWN                          103
#define RINGLWE_R_PARAM_INVALID                          104

#ifdef  __cplusplus
}
#endif
#endif
